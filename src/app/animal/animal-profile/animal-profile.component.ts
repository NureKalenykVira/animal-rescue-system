import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute } from '@angular/router';
import { SiteHeaderComponent } from '../../shared/site-header/site-header.component';
import { SiteFooterComponent } from '../../shared/site-footer/site-footer.component';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';

@Component({
  selector: 'app-animal-profile',
  standalone: true,
  imports: [
    CommonModule,
    SiteHeaderComponent,
    SiteFooterComponent,
    ReactiveFormsModule,
  ],
  templateUrl: './animal-profile.component.html',
  styleUrl: './animal-profile.component.scss'
})
export class AnimalProfileComponent {

  // üîπ –î–ª—è –≤—Å—ñ—Ö
  animalId!: number;
  isAuthenticated = true; // TODO: –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
  isEditing = false;
  isFollowing = false;
  role: 'user' | 'volunteer' | 'vet' = 'user';

  statusLabels: { [key: number]: string } = {
    0: '–ù–æ–≤–æ–ø—Ä–∏–±—É–ª–∏–π',
    1: '–ù–∞ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ',
    2: '–ó–¥–æ—Ä–æ–≤–∏–π',
    3: '–£—Å–∏–Ω–æ–≤–ª–µ–Ω–∏–π'
  };

  animal = {
    name: '–ñ—É—á–∫–∞',
    breed: '–õ–∞–±—Ä–∞–¥–æ—Ä —Ä–µ—Ç—Ä–∏–≤–µ—Ä',
    gender: '–î—ñ–≤—á–∏–Ω–∫–∞',
    foundDate: '2025-03-05',
    location: '—Å. –ù–æ–≤–æ—Å—ñ–ª–∫–∏, –±—ñ–ª—è –æ–∑–µ—Ä–∞',
    status: 2,
    description: '–î–æ–±—Ä–∞ —ñ —Å–ø–æ–∫—ñ–π–Ω–∞ —Å–æ–±–∞–∫–∞, —Ç—Ä–æ—Ö–∏ –ª—è–∫–ª–∏–≤–∞, –∞–ª–µ –π–¥–µ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –∑ –ª—é–¥—å–º–∏.',
    center: '–¶–µ–Ω—Ç—Ä –ø–æ—Ä—è—Ç—É–Ω–∫—É —Ç–≤–∞—Ä–∏–Ω ‚Äú–î–æ–±—Ä–æ–¥—ñ–π‚Äù',
    photoUrl: 'assets/img/deer.jpg',
    qrCodeUrl: ' ',
    vetClinic: {
      name: '–í–µ—Ç–°–µ—Ä–≤—ñ—Å+',
      address: '–º. –ö–∏—ó–≤, –ø—Ä–æ—Å–ø. –ü–µ—Ä–µ–º–æ–≥–∏, 123',
      phone: '+380991112233'
    },
    responsibleUser: {
      name: '–Ü–≥–æ—Ä –ü—à–µ–Ω–∏—á–Ω–∏–π',
      role: '–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä',
      phone: '+380671234567'
    },
    responsibleVolunteer: {
      name: '–û–ª–µ–Ω–∞ –õ—ñ—Å–æ–≤–∞',
      phone: '+380961122334'
    }
  };

  treatmentReports = [
    {
      created_at: '2025-03-07T10:15:00Z',
      description: '–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –æ–≥–ª—è–¥, –≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—è –ø—Ä–æ—Ç–∏ —Å–∫–∞–∑—É —Ç–∞ –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥ –ø–∞—Ä–∞–∑–∏—Ç—ñ–≤.',
      money_spent: 800
    },
    {
      created_at: '2025-03-12T14:40:00Z',
      description: '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–Ω–∞–ª—ñ–∑—ñ–≤, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è –∑ –æ—Ä—Ç–æ–ø–µ–¥–æ–º, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤—ñ—Ç–∞–º—ñ–Ω–∏.',
      money_spent: 650
    }
  ];

  // üîπ –§–æ—Ä–º–∏
  treatmentForm!: FormGroup;
  animalForm!: FormGroup;

  selectedPhoto: File | null = null;
  photoPreview: string | null = null;

  constructor(private route: ActivatedRoute, private fb: FormBuilder) {
    this.route.paramMap.subscribe(params => {
      const idParam = params.get('id');
      if (idParam) {
        this.animalId = +idParam;
      }
    });
  }

  get canEdit(): boolean {
    return this.role === 'volunteer' || this.role === 'vet';
  }

  ngOnInit(): void {
    // —Ñ–æ—Ä–º–∞ –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –ø–æ–ª—è–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è –±—É–¥–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –≤ startEdit()
    this.animalForm = this.fb.group({
      name: [{ value: this.animal.name, disabled: true }, Validators.required],
      breed: [{ value: this.animal.breed, disabled: true }, Validators.required],
      gender: [{ value: this.animal.gender, disabled: true }, Validators.required],
      status: [{ value: this.animal.status, disabled: true }, Validators.required],
      description: [{ value: this.animal.description, disabled: true }, Validators.required],
    });

    this.treatmentForm = this.fb.group({
      description: ['', Validators.required],
      moneySpent: [0, [Validators.required, Validators.min(0)]]
    });
  }

  // üîπ –§–æ—Ç–æ
  onPhotoSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files[0]) {
      this.selectedPhoto = input.files[0];

      const reader = new FileReader();
      reader.onload = () => {
        this.photoPreview = reader.result as string;
        console.log('üì∑ –ü—Ä–µ–≤ º—é –æ–Ω–æ–≤–ª–µ–Ω–æ:', this.photoPreview);
      };
      reader.readAsDataURL(this.selectedPhoto);
    }
  }

  // üîπ –õ—ñ–∫—É–≤–∞–Ω–Ω—è
  addTreatment(): void {
    if (this.treatmentForm.invalid) {
      this.treatmentForm.markAllAsTouched();
      return;
    }

    const report = {
      created_at: new Date().toISOString(),
      description: this.treatmentForm.value.description.trim(),
      money_spent: this.treatmentForm.value.moneySpent
    };

    if (!report.description || report.money_spent < 0) {
      console.warn('–ù–µ–≤—ñ—Ä–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è');
      return;
    }

    this.treatmentReports.unshift(report);
    this.treatmentForm.reset({ description: '', moneySpent: 0 });

    console.log('‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ª—ñ–∫—É–≤–∞–Ω–Ω—è:', report);
  }

  // üîπ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  startEdit(): void {
    this.isEditing = true;
    this.animalForm.enable();
  }

  saveChanges(): void {
    if (this.animalForm.invalid) {
      this.animalForm.markAllAsTouched();
      return;
    }

    this.animal = {
      ...this.animal,
      ...this.animalForm.value
    };

    this.animalForm.disable();
    this.isEditing = false;

    console.log('‚úÖ –î–∞–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ:', this.animal);
  }

  // üîπ –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  toggleFollow(): void {
  if (!this.isAuthenticated) return;

  this.isFollowing = !this.isFollowing;

  if (this.isFollowing) {
    console.log('üîî –í–∏ –ø–æ—á–∞–ª–∏ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ç–≤–∞—Ä–∏–Ω–æ—é –∑ ID:', this.animalId);
    // TODO: –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç POST /animals/:id/follow
  } else {
    console.log('üö´ –í–∏ –ø—Ä–∏–ø–∏–Ω–∏–ª–∏ —Å—Ç–µ–∂–∏—Ç–∏ –∑–∞ —Ç–≤–∞—Ä–∏–Ω–æ—é –∑ ID:', this.animalId);
    // TODO: –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç DELETE /animals/:id/unfollow
  }
}
}
